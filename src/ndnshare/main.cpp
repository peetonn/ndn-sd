// TODO: add copyright

#include <csignal>
#include <filesystem>
#include <fstream>
#include <iostream>
#include <map>
#include <thread>

#include <docopt.h>
#include <ndn-ind/face.hpp>
#include <ndn-ind-tools/micro-forwarder/micro-forwarder-transport.hpp>
#include <cnl-cpp/namespace.hpp>
#include <cnl-cpp/generalized-object/generalized-object-handler.hpp>
#include <cli/cli.h>
#include <cli/loopscheduler.h>
#include <cli/clilocalsession.h>

#include <ndn-sd/ndn-sd.hpp>

#include "config.hpp"
#include "logging.hpp"
#include "ndnapp.hpp"
#include "mime.hpp"
#include "uuid.hpp"



using namespace std;
using namespace ndnsd;
using namespace ndn;
using namespace cnl_cpp;

static const char USAGE[] =
//R"(ndnshare.
//
//    Usage:
//      ndnshare <path> <prefix> --cert=<certificate> [--udp | --tcp] [--quiet] [--anchor=<trust_anchor>] [--id=<node_id>] [--logfile=<file>]
//      ndnshare (-h | --help)
//      ndnshare --version
//
//    Options:
//      -h --help                 Show this screen.
//      --version                 Show version.
//      --cert=<certificate>      Certificate used to sign data.
//      --udp                     Advertise over Bonjour as UDP-only service.
//      --tcp                     Advertise over Bonjour as TCP-only service.
//      --anchor=<tust_anchor>    Trust anchor (certificate) used to verify connections and incoming data.
//      --id=<node_id>            Custom node ID (generated, if not provided).
//      --logfile=<file>          Log file(defaults to stdout if not provided).
//      --quiet                   No output mode.
//)";
R"(ndnshare.

    Usage:
      ndnshare <path> <prefix> --cert=<certificate> [--id=<node_id>] [--anchor=<trust_anchor>] [--logfile=<log_file>] [--tcp | --udp]
      ndnshare get <prefix>
      ndnshare browse
      ndnshare (-h | --help)
      ndnshare --version

    Options:
      -h --help                 Show this screen.
      --version                 Show version.
      --cert=<certificate>      Certificate used to sign data.
      --id=<node_id>            Custom node ID (generated, if not provided).
      --anchor=<tust_anchor>    Trust anchor (certificate) used to verify connections and incoming data.
      --logfile=<log_file>      Log file(defaults to stdout if not provided).
      -t, --tcp                 Advertise over Bonjour as TCP-only service.
      -u, --udp                 Advertise over Bonjour as UDP-only service.
)";
//--logfile = <file>          Log file(defaults to stdout if not provided).
//--quiet                   No output mode.
//R"(Naval Fate.
//
//    Usage:
//      naval_fate ship new <name>...
//      naval_fate ship <name> move <x> <y> [--speed=<kn>]
//      naval_fate ship shoot <x> <y>
//      naval_fate mine (set|remove) <x> <y> [--moored | --drifting]
//      naval_fate (-h | --help)
//      naval_fate --version
//
//    Options:
//      -h --help     Show this screen.
//      --version     Show version.
//      --speed=<kn>  Speed in knots [default: 10].
//      --moored      Moored (anchored) mine.
//      --drifting    Drifting mine.
//)";

vector<Proto> loadProtocols(const map<string, docopt::value>& args);
NdnSd::AdvertiseParameters loadParameters(const string& instanceId, const map<string, docopt::value>& args);

atomic_bool run = true;
void signal_handler(int signal)
{
	run = !(signal == SIGINT);
    NLOG_DEBUG("signal caught");
}

#include "mime.hpp"
class FilePublisher {
public:
    FilePublisher(std::string rootPath, std::string prefix, 
        ndn::Face *face, ndn::KeyChain* keyChain,
        std::shared_ptr<spdlog::logger> logger)
        : rootPath_(rootPath)
        , prefix_(prefix, keyChain)
        , prefixRegisterFailure_(false)
        , logger_(logger)
    {
        prefix_.setFace(face, [this](auto prefix) {
            logger_->error("failed to register prefix {}", prefix->toUri());
            prefixRegisterFailure_ = true;
        });
        prefix_.addOnObjectNeeded(bind(&FilePublisher::onObjectNeeded, this, 
            std::placeholders::_1, std::placeholders::_2, std::placeholders::_3));
    }
    ~FilePublisher() {}

    void processEvents() {
        if (prefixRegisterFailure_)
            throw std::runtime_error("failed to register prefix " + prefix_.getName().toUri());
    }

    void fetch(const std::string& prefx);

    std::string getRootPath() const { return rootPath_; }
    std::vector<std::string> getFiles() const;

private:
    bool prefixRegisterFailure_;
    std::string rootPath_;
    std::shared_ptr<spdlog::logger> logger_;
    cnl_cpp::Namespace prefix_;

    bool onObjectNeeded(cnl_cpp::Namespace&, cnl_cpp::Namespace& neededNamespace, uint64_t);
    void writeData(const std::string& fileName, const ndn::Blob& data);
};

bool FilePublisher::onObjectNeeded(Namespace& nmspc, Namespace& neededNamespace, uint64_t callbackId)
{
    assert(nmspc.getName().compare(neededNamespace.getName()) == -1);
    Name fileSuffix = neededNamespace.getName().getSubName(nmspc.getName().size());
    string fileName = fileSuffix[0].toEscapedString();
    

    logger_->trace("nmspc: {} needed {}", nmspc.getName().toUri(), neededNamespace.getName().toUri());
    
    filesystem::path filePath(rootPath_, filesystem::path::format::native_format);
    filePath = filePath / fileName; // filesystem::path(fileName, filesystem::path::format::generic_format);

    if (filesystem::exists(filePath))
    {
        Namespace& fileNamespace = nmspc[Name::Component(fileName)];
        MetaInfo fileMeta;
        fileMeta.setFreshnessPeriod(chrono::milliseconds(1000)); // TODO: what freshness to use
        //fileNamespace.setNewDataMetaInfo(fileMeta);

        // TODO: this should be refactored for huge files (can't read all into memory)
        ifstream file(filePath, ios::binary | ios::ate);
        logger_->trace("read {}", filePath.string());

        streamsize size = file.tellg();
        file.seekg(0, ios::beg);
        ptr_lib::shared_ptr<vector<uint8_t>> fileContents = ptr_lib::make_shared<vector<uint8_t>>(size);

        logger_->trace("read {} bytes from disk", fileContents->size());

        /*auto logger = logger_;
        fileNamespace.addOnStateChanged([logger](Namespace& nameSpace, Namespace& changedNamespace, NamespaceState state,
            uint64_t callbackId) {

            logger->trace("namespace {} state change: {} -- {}", 
                nameSpace.getName().toUri(), changedNamespace.getName().toUri(), state);
        });*/

        if (file.read((char*)fileContents->data(), size))
        {
            Blob fileBlob(fileContents, false);
            GeneralizedObjectHandler handler;
            handler.setObject(fileNamespace, fileBlob, mime::content_type(filePath.extension().string()));

            logger_->info("published {}", fileNamespace.getName().toUri());

            return true;
        }
        else
        {
            logger_->error("failed to read file {}", filePath.string());
        }
    }
    else
    {
        logger_->warn("file {} does not exist", filePath.string());
    }

    return false;
}

void FilePublisher::fetch(const std::string& name)
{
    shared_ptr<Namespace> fileObject = make_shared<Namespace>(name);
    fileObject->setFace(prefix_.getFace_());

    //shared_ptr<GeneralizedObjectHandler> gobj = make_shared<GeneralizedObjectHandler>();
    auto onObject = [&, fileObject, name](const ptr_lib::shared_ptr<ContentMetaInfoObject>& contentMetaInfo,
        Namespace& objectNamespace)
    {
        NLOG_INFO("fetched {}: {} bytes, content-type {}", name,
            objectNamespace.getBlobObject().size(), contentMetaInfo->getContentType());

        writeData(objectNamespace.getName()[-1].toEscapedString(), objectNamespace.getBlobObject());
    };

    /*fileObject->addOnStateChanged([](Namespace& nameSpace, Namespace& changedNamespace, NamespaceState state,
        uint64_t callbackId) {

        NLOG_TRACE("namespace {} state change: {} -- {}",
            nameSpace.getName().toUri(), changedNamespace.getName().toUri(), state);
    });*/

    GeneralizedObjectHandler(fileObject.get(), onObject).objectNeeded(true);
};

vector<string> FilePublisher::getFiles() const
{
    vector<string> files;

    for (auto const& entry : filesystem::directory_iterator(getRootPath()))
    {
        if (entry.is_regular_file())
            files.push_back(entry.path().filename().string());
    }

    return files;
}

void FilePublisher::writeData(const string& fileName, const ndn::Blob& data)
{
    filesystem::path filePath(rootPath_, filesystem::path::format::native_format);
    filePath = filePath / fileName;

    ofstream wf(filePath.string(), ios::out | ios::binary);
    if (!wf) {
        logger_->error("error writing to {}", filePath.string());
        return ;
    }

    wf.write((const char*)data.buf(), data.size());
    wf.close();

    if (!wf.good())
        logger_->error("error writing to {}: ", filePath.string());
    else
        logger_->info("stored at {}", filePath.string());
}

static uint8_t DEFAULT_RSA_PUBLIC_KEY_DER[] = {
  0x30, 0x82, 0x01, 0x22, 0x30, 0x0d, 0x06, 0x09, 0x2a, 0x86, 0x48, 0x86, 0xf7, 0x0d, 0x01, 0x01,
  0x01, 0x05, 0x00, 0x03, 0x82, 0x01, 0x0f, 0x00, 0x30, 0x82, 0x01, 0x0a, 0x02, 0x82, 0x01, 0x01,
  0x00, 0xb8, 0x09, 0xa7, 0x59, 0x82, 0x84, 0xec, 0x4f, 0x06, 0xfa, 0x1c, 0xb2, 0xe1, 0x38, 0x93,
  0x53, 0xbb, 0x7d, 0xd4, 0xac, 0x88, 0x1a, 0xf8, 0x25, 0x11, 0xe4, 0xfa, 0x1d, 0x61, 0x24, 0x5b,
  0x82, 0xca, 0xcd, 0x72, 0xce, 0xdb, 0x66, 0xb5, 0x8d, 0x54, 0xbd, 0xfb, 0x23, 0xfd, 0xe8, 0x8e,
  0xaf, 0xa7, 0xb3, 0x79, 0xbe, 0x94, 0xb5, 0xb7, 0xba, 0x17, 0xb6, 0x05, 0xae, 0xce, 0x43, 0xbe,
  0x3b, 0xce, 0x6e, 0xea, 0x07, 0xdb, 0xbf, 0x0a, 0x7e, 0xeb, 0xbc, 0xc9, 0x7b, 0x62, 0x3c, 0xf5,
  0xe1, 0xce, 0xe1, 0xd9, 0x8d, 0x9c, 0xfe, 0x1f, 0xc7, 0xf8, 0xfb, 0x59, 0xc0, 0x94, 0x0b, 0x2c,
  0xd9, 0x7d, 0xbc, 0x96, 0xeb, 0xb8, 0x79, 0x22, 0x8a, 0x2e, 0xa0, 0x12, 0x1d, 0x42, 0x07, 0xb6,
  0x5d, 0xdb, 0xe1, 0xf6, 0xb1, 0x5d, 0x7b, 0x1f, 0x54, 0x52, 0x1c, 0xa3, 0x11, 0x9b, 0xf9, 0xeb,
  0xbe, 0xb3, 0x95, 0xca, 0xa5, 0x87, 0x3f, 0x31, 0x18, 0x1a, 0xc9, 0x99, 0x01, 0xec, 0xaa, 0x90,
  0xfd, 0x8a, 0x36, 0x35, 0x5e, 0x12, 0x81, 0xbe, 0x84, 0x88, 0xa1, 0x0d, 0x19, 0x2a, 0x4a, 0x66,
  0xc1, 0x59, 0x3c, 0x41, 0x83, 0x3d, 0x3d, 0xb8, 0xd4, 0xab, 0x34, 0x90, 0x06, 0x3e, 0x1a, 0x61,
  0x74, 0xbe, 0x04, 0xf5, 0x7a, 0x69, 0x1b, 0x9d, 0x56, 0xfc, 0x83, 0xb7, 0x60, 0xc1, 0x5e, 0x9d,
  0x85, 0x34, 0xfd, 0x02, 0x1a, 0xba, 0x2c, 0x09, 0x72, 0xa7, 0x4a, 0x5e, 0x18, 0xbf, 0xc0, 0x58,
  0xa7, 0x49, 0x34, 0x46, 0x61, 0x59, 0x0e, 0xe2, 0x6e, 0x9e, 0xd2, 0xdb, 0xfd, 0x72, 0x2f, 0x3c,
  0x47, 0xcc, 0x5f, 0x99, 0x62, 0xee, 0x0d, 0xf3, 0x1f, 0x30, 0x25, 0x20, 0x92, 0x15, 0x4b, 0x04,
  0xfe, 0x15, 0x19, 0x1d, 0xdc, 0x7e, 0x5c, 0x10, 0x21, 0x52, 0x21, 0x91, 0x54, 0x60, 0x8b, 0x92,
  0x41, 0x02, 0x03, 0x01, 0x00, 0x01
};

// PKCS #8 PrivateKeyInfo.
static uint8_t DEFAULT_RSA_PRIVATE_KEY_DER[] = {
  0x30, 0x82, 0x04, 0xbf, 0x02, 0x01, 0x00, 0x30, 0x0d, 0x06, 0x09, 0x2a, 0x86, 0x48, 0x86, 0xf7,
  0x0d, 0x01, 0x01, 0x01, 0x05, 0x00, 0x04, 0x82, 0x04, 0xa9, 0x30, 0x82, 0x04, 0xa5, 0x02, 0x01,
  0x00, 0x02, 0x82, 0x01, 0x01, 0x00, 0xb8, 0x09, 0xa7, 0x59, 0x82, 0x84, 0xec, 0x4f, 0x06, 0xfa,
  0x1c, 0xb2, 0xe1, 0x38, 0x93, 0x53, 0xbb, 0x7d, 0xd4, 0xac, 0x88, 0x1a, 0xf8, 0x25, 0x11, 0xe4,
  0xfa, 0x1d, 0x61, 0x24, 0x5b, 0x82, 0xca, 0xcd, 0x72, 0xce, 0xdb, 0x66, 0xb5, 0x8d, 0x54, 0xbd,
  0xfb, 0x23, 0xfd, 0xe8, 0x8e, 0xaf, 0xa7, 0xb3, 0x79, 0xbe, 0x94, 0xb5, 0xb7, 0xba, 0x17, 0xb6,
  0x05, 0xae, 0xce, 0x43, 0xbe, 0x3b, 0xce, 0x6e, 0xea, 0x07, 0xdb, 0xbf, 0x0a, 0x7e, 0xeb, 0xbc,
  0xc9, 0x7b, 0x62, 0x3c, 0xf5, 0xe1, 0xce, 0xe1, 0xd9, 0x8d, 0x9c, 0xfe, 0x1f, 0xc7, 0xf8, 0xfb,
  0x59, 0xc0, 0x94, 0x0b, 0x2c, 0xd9, 0x7d, 0xbc, 0x96, 0xeb, 0xb8, 0x79, 0x22, 0x8a, 0x2e, 0xa0,
  0x12, 0x1d, 0x42, 0x07, 0xb6, 0x5d, 0xdb, 0xe1, 0xf6, 0xb1, 0x5d, 0x7b, 0x1f, 0x54, 0x52, 0x1c,
  0xa3, 0x11, 0x9b, 0xf9, 0xeb, 0xbe, 0xb3, 0x95, 0xca, 0xa5, 0x87, 0x3f, 0x31, 0x18, 0x1a, 0xc9,
  0x99, 0x01, 0xec, 0xaa, 0x90, 0xfd, 0x8a, 0x36, 0x35, 0x5e, 0x12, 0x81, 0xbe, 0x84, 0x88, 0xa1,
  0x0d, 0x19, 0x2a, 0x4a, 0x66, 0xc1, 0x59, 0x3c, 0x41, 0x83, 0x3d, 0x3d, 0xb8, 0xd4, 0xab, 0x34,
  0x90, 0x06, 0x3e, 0x1a, 0x61, 0x74, 0xbe, 0x04, 0xf5, 0x7a, 0x69, 0x1b, 0x9d, 0x56, 0xfc, 0x83,
  0xb7, 0x60, 0xc1, 0x5e, 0x9d, 0x85, 0x34, 0xfd, 0x02, 0x1a, 0xba, 0x2c, 0x09, 0x72, 0xa7, 0x4a,
  0x5e, 0x18, 0xbf, 0xc0, 0x58, 0xa7, 0x49, 0x34, 0x46, 0x61, 0x59, 0x0e, 0xe2, 0x6e, 0x9e, 0xd2,
  0xdb, 0xfd, 0x72, 0x2f, 0x3c, 0x47, 0xcc, 0x5f, 0x99, 0x62, 0xee, 0x0d, 0xf3, 0x1f, 0x30, 0x25,
  0x20, 0x92, 0x15, 0x4b, 0x04, 0xfe, 0x15, 0x19, 0x1d, 0xdc, 0x7e, 0x5c, 0x10, 0x21, 0x52, 0x21,
  0x91, 0x54, 0x60, 0x8b, 0x92, 0x41, 0x02, 0x03, 0x01, 0x00, 0x01, 0x02, 0x82, 0x01, 0x01, 0x00,
  0x8a, 0x05, 0xfb, 0x73, 0x7f, 0x16, 0xaf, 0x9f, 0xa9, 0x4c, 0xe5, 0x3f, 0x26, 0xf8, 0x66, 0x4d,
  0xd2, 0xfc, 0xd1, 0x06, 0xc0, 0x60, 0xf1, 0x9f, 0xe3, 0xa6, 0xc6, 0x0a, 0x48, 0xb3, 0x9a, 0xca,
  0x21, 0xcd, 0x29, 0x80, 0x88, 0x3d, 0xa4, 0x85, 0xa5, 0x7b, 0x82, 0x21, 0x81, 0x28, 0xeb, 0xf2,
  0x43, 0x24, 0xb0, 0x76, 0xc5, 0x52, 0xef, 0xc2, 0xea, 0x4b, 0x82, 0x41, 0x92, 0xc2, 0x6d, 0xa6,
  0xae, 0xf0, 0xb2, 0x26, 0x48, 0xa1, 0x23, 0x7f, 0x02, 0xcf, 0xa8, 0x90, 0x17, 0xa2, 0x3e, 0x8a,
  0x26, 0xbd, 0x6d, 0x8a, 0xee, 0xa6, 0x0c, 0x31, 0xce, 0xc2, 0xbb, 0x92, 0x59, 0xb5, 0x73, 0xe2,
  0x7d, 0x91, 0x75, 0xe2, 0xbd, 0x8c, 0x63, 0xe2, 0x1c, 0x8b, 0xc2, 0x6a, 0x1c, 0xfe, 0x69, 0xc0,
  0x44, 0xcb, 0x58, 0x57, 0xb7, 0x13, 0x42, 0xf0, 0xdb, 0x50, 0x4c, 0xe0, 0x45, 0x09, 0x8f, 0xca,
  0x45, 0x8a, 0x06, 0xfe, 0x98, 0xd1, 0x22, 0xf5, 0x5a, 0x9a, 0xdf, 0x89, 0x17, 0xca, 0x20, 0xcc,
  0x12, 0xa9, 0x09, 0x3d, 0xd5, 0xf7, 0xe3, 0xeb, 0x08, 0x4a, 0xc4, 0x12, 0xc0, 0xb9, 0x47, 0x6c,
  0x79, 0x50, 0x66, 0xa3, 0xf8, 0xaf, 0x2c, 0xfa, 0xb4, 0x6b, 0xec, 0x03, 0xad, 0xcb, 0xda, 0x24,
  0x0c, 0x52, 0x07, 0x87, 0x88, 0xc0, 0x21, 0xf3, 0x02, 0xe8, 0x24, 0x44, 0x0f, 0xcd, 0xa0, 0xad,
  0x2f, 0x1b, 0x79, 0xab, 0x6b, 0x49, 0x4a, 0xe6, 0x3b, 0xd0, 0xad, 0xc3, 0x48, 0xb9, 0xf7, 0xf1,
  0x34, 0x09, 0xeb, 0x7a, 0xc0, 0xd5, 0x0d, 0x39, 0xd8, 0x45, 0xce, 0x36, 0x7a, 0xd8, 0xde, 0x3c,
  0xb0, 0x21, 0x96, 0x97, 0x8a, 0xff, 0x8b, 0x23, 0x60, 0x4f, 0xf0, 0x3d, 0xd7, 0x8f, 0xf3, 0x2c,
  0xcb, 0x1d, 0x48, 0x3f, 0x86, 0xc4, 0xa9, 0x00, 0xf2, 0x23, 0x2d, 0x72, 0x4d, 0x66, 0xa5, 0x01,
  0x02, 0x81, 0x81, 0x00, 0xdc, 0x4f, 0x99, 0x44, 0x0d, 0x7f, 0x59, 0x46, 0x1e, 0x8f, 0xe7, 0x2d,
  0x8d, 0xdd, 0x54, 0xc0, 0xf7, 0xfa, 0x46, 0x0d, 0x9d, 0x35, 0x03, 0xf1, 0x7c, 0x12, 0xf3, 0x5a,
  0x9d, 0x83, 0xcf, 0xdd, 0x37, 0x21, 0x7c, 0xb7, 0xee, 0xc3, 0x39, 0xd2, 0x75, 0x8f, 0xb2, 0x2d,
  0x6f, 0xec, 0xc6, 0x03, 0x55, 0xd7, 0x00, 0x67, 0xd3, 0x9b, 0xa2, 0x68, 0x50, 0x6f, 0x9e, 0x28,
  0xa4, 0x76, 0x39, 0x2b, 0xb2, 0x65, 0xcc, 0x72, 0x82, 0x93, 0xa0, 0xcf, 0x10, 0x05, 0x6a, 0x75,
  0xca, 0x85, 0x35, 0x99, 0xb0, 0xa6, 0xc6, 0xef, 0x4c, 0x4d, 0x99, 0x7d, 0x2c, 0x38, 0x01, 0x21,
  0xb5, 0x31, 0xac, 0x80, 0x54, 0xc4, 0x18, 0x4b, 0xfd, 0xef, 0xb3, 0x30, 0x22, 0x51, 0x5a, 0xea,
  0x7d, 0x9b, 0xb2, 0x9d, 0xcb, 0xba, 0x3f, 0xc0, 0x1a, 0x6b, 0xcd, 0xb0, 0xe6, 0x2f, 0x04, 0x33,
  0xd7, 0x3a, 0x49, 0x71, 0x02, 0x81, 0x81, 0x00, 0xd5, 0xd9, 0xc9, 0x70, 0x1a, 0x13, 0xb3, 0x39,
  0x24, 0x02, 0xee, 0xb0, 0xbb, 0x84, 0x17, 0x12, 0xc6, 0xbd, 0x65, 0x73, 0xe9, 0x34, 0x5d, 0x43,
  0xff, 0xdc, 0xf8, 0x55, 0xaf, 0x2a, 0xb9, 0xe1, 0xfa, 0x71, 0x65, 0x4e, 0x50, 0x0f, 0xa4, 0x3b,
  0xe5, 0x68, 0xf2, 0x49, 0x71, 0xaf, 0x15, 0x88, 0xd7, 0xaf, 0xc4, 0x9d, 0x94, 0x84, 0x6b, 0x5b,
  0x10, 0xd5, 0xc0, 0xaa, 0x0c, 0x13, 0x62, 0x99, 0xc0, 0x8b, 0xfc, 0x90, 0x0f, 0x87, 0x40, 0x4d,
  0x58, 0x88, 0xbd, 0xe2, 0xba, 0x3e, 0x7e, 0x2d, 0xd7, 0x69, 0xa9, 0x3c, 0x09, 0x64, 0x31, 0xb6,
  0xcc, 0x4d, 0x1f, 0x23, 0xb6, 0x9e, 0x65, 0xd6, 0x81, 0xdc, 0x85, 0xcc, 0x1e, 0xf1, 0x0b, 0x84,
  0x38, 0xab, 0x93, 0x5f, 0x9f, 0x92, 0x4e, 0x93, 0x46, 0x95, 0x6b, 0x3e, 0xb6, 0xc3, 0x1b, 0xd7,
  0x69, 0xa1, 0x0a, 0x97, 0x37, 0x78, 0xed, 0xd1, 0x02, 0x81, 0x80, 0x33, 0x18, 0xc3, 0x13, 0x65,
  0x8e, 0x03, 0xc6, 0x9f, 0x90, 0x00, 0xae, 0x30, 0x19, 0x05, 0x6f, 0x3c, 0x14, 0x6f, 0xea, 0xf8,
  0x6b, 0x33, 0x5e, 0xee, 0xc7, 0xf6, 0x69, 0x2d, 0xdf, 0x44, 0x76, 0xaa, 0x32, 0xba, 0x1a, 0x6e,
  0xe6, 0x18, 0xa3, 0x17, 0x61, 0x1c, 0x92, 0x2d, 0x43, 0x5d, 0x29, 0xa8, 0xdf, 0x14, 0xd8, 0xff,
  0xdb, 0x38, 0xef, 0xb8, 0xb8, 0x2a, 0x96, 0x82, 0x8e, 0x68, 0xf4, 0x19, 0x8c, 0x42, 0xbe, 0xcc,
  0x4a, 0x31, 0x21, 0xd5, 0x35, 0x6c, 0x5b, 0xa5, 0x7c, 0xff, 0xd1, 0x85, 0x87, 0x28, 0xdc, 0x97,
  0x75, 0xe8, 0x03, 0x80, 0x1d, 0xfd, 0x25, 0x34, 0x41, 0x31, 0x21, 0x12, 0x87, 0xe8, 0x9a, 0xb7,
  0x6a, 0xc0, 0xc4, 0x89, 0x31, 0x15, 0x45, 0x0d, 0x9c, 0xee, 0xf0, 0x6a, 0x2f, 0xe8, 0x59, 0x45,
  0xc7, 0x7b, 0x0d, 0x6c, 0x55, 0xbb, 0x43, 0xca, 0xc7, 0x5a, 0x01, 0x02, 0x81, 0x81, 0x00, 0xab,
  0xf4, 0xd5, 0xcf, 0x78, 0x88, 0x82, 0xc2, 0xdd, 0xbc, 0x25, 0xe6, 0xa2, 0xc1, 0xd2, 0x33, 0xdc,
  0xef, 0x0a, 0x97, 0x2b, 0xdc, 0x59, 0x6a, 0x86, 0x61, 0x4e, 0xa6, 0xc7, 0x95, 0x99, 0xa6, 0xa6,
  0x55, 0x6c, 0x5a, 0x8e, 0x72, 0x25, 0x63, 0xac, 0x52, 0xb9, 0x10, 0x69, 0x83, 0x99, 0xd3, 0x51,
  0x6c, 0x1a, 0xb3, 0x83, 0x6a, 0xff, 0x50, 0x58, 0xb7, 0x28, 0x97, 0x13, 0xe2, 0xba, 0x94, 0x5b,
  0x89, 0xb4, 0xea, 0xba, 0x31, 0xcd, 0x78, 0xe4, 0x4a, 0x00, 0x36, 0x42, 0x00, 0x62, 0x41, 0xc6,
  0x47, 0x46, 0x37, 0xea, 0x6d, 0x50, 0xb4, 0x66, 0x8f, 0x55, 0x0c, 0xc8, 0x99, 0x91, 0xd5, 0xec,
  0xd2, 0x40, 0x1c, 0x24, 0x7d, 0x3a, 0xff, 0x74, 0xfa, 0x32, 0x24, 0xe0, 0x11, 0x2b, 0x71, 0xad,
  0x7e, 0x14, 0xa0, 0x77, 0x21, 0x68, 0x4f, 0xcc, 0xb6, 0x1b, 0xe8, 0x00, 0x49, 0x13, 0x21, 0x02,
  0x81, 0x81, 0x00, 0xb6, 0x18, 0x73, 0x59, 0x2c, 0x4f, 0x92, 0xac, 0xa2, 0x2e, 0x5f, 0xb6, 0xbe,
  0x78, 0x5d, 0x47, 0x71, 0x04, 0x92, 0xf0, 0xd7, 0xe8, 0xc5, 0x7a, 0x84, 0x6b, 0xb8, 0xb4, 0x30,
  0x1f, 0xd8, 0x0d, 0x58, 0xd0, 0x64, 0x80, 0xa7, 0x21, 0x1a, 0x48, 0x00, 0x37, 0xd6, 0x19, 0x71,
  0xbb, 0x91, 0x20, 0x9d, 0xe2, 0xc3, 0xec, 0xdb, 0x36, 0x1c, 0xca, 0x48, 0x7d, 0x03, 0x32, 0x74,
  0x1e, 0x65, 0x73, 0x02, 0x90, 0x73, 0xd8, 0x3f, 0xb5, 0x52, 0x35, 0x79, 0x1c, 0xee, 0x93, 0xa3,
  0x32, 0x8b, 0xed, 0x89, 0x98, 0xf1, 0x0c, 0xd8, 0x12, 0xf2, 0x89, 0x7f, 0x32, 0x23, 0xec, 0x67,
  0x66, 0x52, 0x83, 0x89, 0x99, 0x5e, 0x42, 0x2b, 0x42, 0x4b, 0x84, 0x50, 0x1b, 0x3e, 0x47, 0x6d,
  0x74, 0xfb, 0xd1, 0xa6, 0x10, 0x20, 0x6c, 0x6e, 0xbe, 0x44, 0x3f, 0xb9, 0xfe, 0xbc, 0x8d, 0xda,
  0xcb, 0xea, 0x8f
};

int main(int argc, char** argv)
{
    signal(SIGINT, signal_handler);
    spdlog::set_level(spdlog::level::trace);

    map<string, docopt::value> args;
    try {
        args = docopt::docopt(USAGE, { argv + 1, argv + argc },
            true, NDNSHARE_VERSION);
    }
    catch (std::exception& e)
    {
        NLOG_ERROR("exception parsing command-line arguments: {} - {}", typeid(e).name(), e.what());
        return -1;
    }

#if 0
    for (auto const& arg : args) {
        fmt::print("{:>40}: {}\n",
            fmt::format(fg(fmt::color::crimson) | fmt::emphasis::bold, arg.first),
            arg.second);
    }
#endif

    string instanceId = (args["--id"] ? args["--id"].asString() : uuid::generate_uuid_v4());
    vector<Proto> protocols = loadProtocols(args);
    NdnSd::AdvertiseParameters params = loadParameters(instanceId, args);

    ndnapp::App app("ndnshare", instanceId, spdlog::default_logger());

    app.setAddInstanceCallback([](auto sd) {
        /*NLOG_DEBUG("will setup face here for {}/{} {}:{}",
            sd->getUuid(), sd->getProtocol(),
            sd->getHostname(), sd->getPort());*/

    });
    app.setRemoveInstanceCallback([](auto sd) {
        //NLOG_DEBUG("will remove face, maybe?");
    });

    app.setup(protocols, params);

    try
    {
        // setup producer
        KeyChain keyChain; // ("pib-memory:", "tpm-memory:");
        keyChain.createIdentityV2(Name(params.prefix_));
        //Name keyName = Name(params.prefix_).append("KEY").append("123");
        //keyChain.importSafeBag(SafeBag
        //(keyName,
        //    Blob(DEFAULT_RSA_PRIVATE_KEY_DER, sizeof(DEFAULT_RSA_PRIVATE_KEY_DER)),
        //    Blob(DEFAULT_RSA_PUBLIC_KEY_DER, sizeof(DEFAULT_RSA_PUBLIC_KEY_DER))));

        Face face(ptr_lib::make_shared<ndntools::MicroForwarderTransport>(),
            ptr_lib::make_shared<ndntools::MicroForwarderTransport::ConnectionInfo>(app.getMfd()));
        face.setCommandSigningInfo(keyChain, keyChain.getDefaultCertificateName());

        FilePublisher producer(args["<path>"].asString(), params.prefix_, &face, &keyChain, spdlog::default_logger());

        // setup cli
        cli::LoopScheduler sessionLoop;

        auto rootMenu = make_unique<cli::Menu>("cli");
        rootMenu->Insert("get", { "ndn_name" },
            [&](ostream& os, string name)
        {
            os << "will fetch " << name << endl;

            sessionLoop.Post(std::bind(&FilePublisher::fetch, &producer, name));
        },
            "Fetch NDN generalized object and save as file");
        rootMenu->Insert("faces",
            [&](ostream& os)
        {
            for (auto& [faceId, faceUri] : app.getMfd()->getFaces())
            {
                os << "\t" << faceId << " " << faceUri << endl;
            }
        });
        rootMenu->Insert("routes",
            [&](ostream& os) 
        {
            for (auto& [route, faces] : app.getMfd()->getRoutes())
            {
                os << "\t" << route;
                for (auto fId : faces) os << " " << fId;
                os << endl;
            }
        });
        rootMenu->Insert("files",
            [&](ostream& os)
        {
            os << "\t" << producer.getRootPath() << ":" << endl;
            for (auto& f : producer.getFiles())
                os << "\t\t" << f << endl;
        });

        cli::Cli cli(move(rootMenu));
        cli.ExitAction([&](auto& out) { run = false; });
        
        cli::LoopScheduler runLoop;
        cli::CliLocalTerminalSession session(cli, runLoop, cout);

        thread cliThread([&]() {
            while (run)
            {
                try 
                {
                    runLoop.Run();
                }
                catch (exception& e)
                {
                    NLOG_ERROR("caught exception in terminal session thread: {}", e.what());
                }
            }
        });

        // main runloop
        auto processEvents = [&]() {
            try
            {
                app.processEvents();
                producer.processEvents();
            }
            catch (exception& e)
            {
                NLOG_ERROR("caught exception while processing events: {}", e.what());
            }
        };

        while (run)
        {
            sessionLoop.Post(processEvents);
            sessionLoop.ExecOne();

            this_thread::sleep_for(chrono::milliseconds(5));
        }

        runLoop.Stop();
        cliThread.join();
    }
    catch (exception& e)
    {
        NLOG_ERROR("caught exception {}", e.what());
    }

    NLOG_INFO("shutting down.");
	return 0;
}

// helper code
vector<Proto> loadProtocols(const map<string, docopt::value>& args)
{
    vector<Proto> protocols;

    if (!args.at("--tcp") && !args.at("--udp"))
    {
        protocols.push_back(Proto::TCP);
        protocols.push_back(Proto::UDP);
    }
    else
    {
        if (args.at("--tcp"))
            protocols.push_back(Proto::TCP);
        if (args.at("--udp"))
            protocols.push_back(Proto::UDP);
    }
    return protocols;
}

NdnSd::AdvertiseParameters loadParameters(const string& instanceId, const map<string, docopt::value>& args)
{
    NdnSd::AdvertiseParameters params;

    ndn::CertificateV2 cert; // TODO: read from file

    //params.cert_ = /*load from file*/;
    params.port_ = 0;
    params.prefix_ = args.at("<prefix>").asString() + "/" + instanceId;
    params.subtype_ = kNdnDnsServiceSubtypeMFD;

    return params;
}
